task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
    distributionUrl = 'http://services.gradle.org/distributions/gradle-2.7-all.zip'
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
    }
}

configure(allprojects) {
    configureMaven(project)
    configureGitRevision(project)

    switch (getProjectGroup(project, rootDir)) {
        case 'java':
            configureJavaPlugin(project)
            configureJavaProject(project)
            break;
        case 'android':
            configureJavaPlugin(project)
            configureAndroidProject(project)
            break;
        case 'android-aar':
            configureAndroidPlugin(project)
            configureAndroidProject(project)
            break;
    }
}

def configureMaven(Project project) {
    project.apply plugin: 'maven'
    project.group = 'com.github.michiruf'
}

def configureGitRevision(Project project) {
    project.version = ('git rev-list --count HEAD ' + getRelativeProjectPath(project, rootDir))
            .execute((List) null, rootDir)
            .text
            .trim()
}

def configureJavaPlugin(Project project) {
    configure(project) {
        apply plugin: 'java'

        configurations {
            provided
            providedPlusCompile.extendsFrom(compile, provided)
            testCompile.extendsFrom(providedPlusCompile)
        }

        sourceSets {
            main.compileClasspath = configurations.providedPlusCompile
            //test.compileClasspath = configurations.providedPlusCompile
        }

        plugins.withType(IdeaPlugin) {
            idea.module.scopes.PROVIDED.plus = [configurations.provided]
        }
    }
}

def configureJavaProject(Project project) {
}

def configureAndroidPlugin(Project project) {
    configure(project) {
        buildscript {
            repositories {
                jcenter()
            }
            dependencies {
                classpath 'com.android.tools.build:gradle:1.3.0'
            }
        }

        apply plugin: 'com.android.library'
    }
}

def configureAndroidProject(Project project) {
}

def getRelativeProjectPath(Project project, File relativeTo) {
    String relativePath = project.getProjectDir().getCanonicalPath()
            .replace(relativeTo.getCanonicalPath(), '')
            .replace('\\', '/')
    if (relativePath.startsWith('/')) {
        relativePath = relativePath.substring(1)
    }
    return relativePath
}

def getProjectGroup(Project project, File rootDir) {
    switch (project.getName()) {
        case 'server':
        case 'client':
        case 'client-pc':
            return 'java'
        case 'client-android':
            return 'android'
    }
    //String relativePath = getRelativeProjectPath(project, rootDir)
    //int slashIndex = relativePath.indexOf('/');
    //if (slashIndex == -1) {
    //    return relativePath;
    //}
    //return relativePath.substring(0, slashIndex)
}
